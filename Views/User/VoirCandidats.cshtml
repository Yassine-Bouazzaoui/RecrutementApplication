@model List<RecrutementApplication.Models.Candidature>
@{
    ViewData["Title"] = "Voir les Candidats";
}

<style>
    :root {
        --primary-color: #3d7ad6;
        --primary-dark: #2d5aa6;
        --bg-dark: #121212;
        --card-bg: #1e1e1e;
        --card-hover: #252525;
        --text-primary: #ffffff;
        --text-secondary: #a0a0a0;
        --success: #4CAF50;
        --warning: #FFC107;
        --danger: #f44336;
    }

    body {
        background-color: var(--bg-dark);
        color: var(--text-primary);
    }

    .candidates-container {
        background: var(--card-bg);
        border-radius: 12px;
        padding: 1.5rem;
        box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    }

    .page-header {
        background: var(--primary-color);
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .header-title {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        margin: 0;
        font-size: 1.5rem;
    }

    .candidates-counter {
        background: rgba(255, 255, 255, 0.2);
        padding: 0.5rem 1rem;
        border-radius: 20px;
        font-weight: 500;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }

    .counter-icon {
        font-size: 1rem;
    }

    .stats-container {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 1.25rem;
        margin-bottom: 2rem;
    }

    .stat-card {
        background: linear-gradient(145deg, var(--card-bg) 0%, var(--card-hover) 100%);
        padding: 1.25rem;
        border-radius: 12px;
        border: 1px solid rgba(255, 255, 255, 0.05);
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .stat-icon {
        width: 48px;
        height: 48px;
        border-radius: 12px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.5rem;
    }

        .stat-icon.validees {
            background: rgba(76, 175, 80, 0.1);
            color: var(--success);
        }

        .stat-icon.en-attente {
            background: rgba(255, 193, 7, 0.1);
            color: var(--warning);
        }

        .stat-icon.refusees {
            background: rgba(244, 67, 54, 0.1);
            color: var(--danger);
        }

    .stat-content {
        flex: 1;
    }

    .stat-value {
        font-size: 1.75rem;
        font-weight: 700;
        margin-bottom: 0.25rem;
        line-height: 1;
    }

    .stat-label {
        color: var(--text-secondary);
        font-size: 0.9rem;
    }

    .stat-trend {
        font-size: 0.85rem;
        display: flex;
        align-items: center;
        gap: 0.25rem;
        margin-top: 0.5rem;
    }

        .stat-trend.up {
            color: var(--success);
        }

        .stat-trend.down {
            color: var(--danger);
        }

    .avatar-placeholder {
        width: 70px;
        height: 70px;
        border-radius: 10px;
        background: linear-gradient(145deg, var(--primary-color), var(--primary-dark));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        font-weight: 600;
        text-transform: uppercase;
        border: 2px solid rgba(255, 255, 255, 0.1);
        position: relative;
        overflow: hidden;
    }

        .avatar-placeholder::after {
            content: '';
            position: absolute;
            width: 100%;
            height: 100%;
            background: linear-gradient( 45deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 50%, transparent 100% );
        }
    .candidate-card {
        background: var(--card-bg);
        border-radius: 10px;
        margin-bottom: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.05);
        transition: background-color 0.3s ease;
    }

        .candidate-card:hover {
            background: var(--card-hover);
        }

    .profile-section {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
    }

    .profile-avatar {
        width: 70px;
        height: 70px;
        border-radius: 10px;
        object-fit: cover;
    }

    .avatar-placeholder {
        width: 70px;
        height: 70px;
        border-radius: 10px;
        background: var(--primary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
    }

    .candidate-info {
        flex: 1;
    }

    .candidate-name {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .candidate-title {
        color: var(--text-secondary);
        font-size: 0.9rem;
        margin-bottom: 0.5rem;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 1rem;
        padding: 0 1rem 1rem 1rem;
    }

    .info-item {
        background: rgba(255, 255, 255, 0.05);
        padding: 0.75rem;
        border-radius: 8px;
    }

    .info-label {
        color: var(--text-secondary);
        margin-bottom: 0.25rem;
        font-size: 0.8rem;
    }

    .info-value {
        color: var(--text-primary);
        font-size: 0.95rem;
    }

    .status-badge {
        padding: 0.4rem 0.8rem;
        border-radius: 6px;
        font-weight: 500;
        font-size: 0.85rem;
        display: inline-block;
    }

        .status-badge.success {
            background: rgba(76, 175, 80, 0.1);
            color: var(--success);
        }

        .status-badge.warning {
            background: rgba(255, 193, 7, 0.1);
            color: var(--warning);
        }

        .status-badge.danger {
            background: rgba(244, 67, 54, 0.1);
            color: var(--danger);
        }

    .action-buttons {
        padding: 1rem;
        display: flex;
        gap: 0.75rem;
        border-top: 1px solid rgba(255, 255, 255, 0.05);
    }

    .btn {
        padding: 0.5rem 1rem;
        border-radius: 8px;
        border: none;
        font-weight: 500;
        font-size: 0.9rem;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
    }

    .btn-primary {
        background: var(--primary-color);
        color: white;
    }

    .btn-success {
        background: var(--success);
        color: white;
    }

    .btn-danger {
        background: var(--danger);
        color: white;
    }
</style>

<div class="candidates-container">
    <div class="page-header">
        <h1 class="header-title">
            <i class="fas fa-users-gear"></i>
            Liste des Candidats
        </h1>
        <div class="candidates-counter">
            <i class="fas fa-user-friends counter-icon"></i>
            <span>@Model.Count candidature@(Model.Count > 1 ? "s" : "")</span>
        </div>
    </div>

    <div class="stats-container">
        <div class="stat-card">
            <div class="stat-icon validees">
                <i class="fas fa-check-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@Model.Count(c => c.Status == StatusCandidature.Validee)</div>
                <div class="stat-label">Candidatures validées</div>
                <div class="stat-trend up">
                    <i class="fas fa-arrow-up"></i>
                    @{
                        var pourcentageValidees = Model.Any() ?
                        (double)Model.Count(c => c.Status == StatusCandidature.Validee) / Model.Count * 100 : 0;
                    }
                    @pourcentageValidees.ToString("F1")%
                </div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon en-attente">
                <i class="fas fa-clock"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@Model.Count(c => c.Status == StatusCandidature.EnAttente)</div>
                <div class="stat-label">En attente de traitement</div>
                <div class="stat-trend">
                    @{
                        var pourcentageEnAttente = Model.Any() ?
                        (double)Model.Count(c => c.Status == StatusCandidature.EnAttente) / Model.Count * 100 : 0;
                    }
                    @pourcentageEnAttente.ToString("F1")%
                </div>
            </div>
        </div>

        <div class="stat-card">
            <div class="stat-icon refusees">
                <i class="fas fa-times-circle"></i>
            </div>
            <div class="stat-content">
                <div class="stat-value">@Model.Count(c => c.Status == StatusCandidature.Refusee)</div>
                <div class="stat-label">Candidatures refusées</div>
                <div class="stat-trend down">
                    @{
                        var pourcentageRefusees = Model.Any() ?
                        (double)Model.Count(c => c.Status == StatusCandidature.Refusee) / Model.Count * 100 : 0;
                    }
                    @pourcentageRefusees.ToString("F1")%
                </div>
            </div>
        </div>
    </div>

    @foreach (var candidature in Model)
    {
        <div class="candidate-card">
            <div class="profile-section">
                @if (!string.IsNullOrEmpty(candidature.Candidat.ProfilePicture))
                {
                    <img src="@Url.Content($"~/ProfilPics/{candidature.Candidat.ProfilePicture}")"
                         alt="Photo de profil"
                         class="profile-avatar"
                         onerror="this.src='/images/default-avatar.png';" />
                }
                else
                {
                    <div class="avatar-placeholder">
                        @(candidature.Candidat.Prenom[0])@(candidature.Candidat.Nom[0])
                    </div>
                }
                <div class="candidate-info">
                    <div class="candidate-name">@candidature.Candidat.Prenom @candidature.Candidat.Nom</div>
                    <div class="candidate-title">@candidature.Candidat.Titre</div>
                    <div class="status-badge @(candidature.Status == StatusCandidature.Validee ? "success" :
                                           candidature.Status == StatusCandidature.Refusee ? "danger" : "warning")">
                        @candidature.Status.ToString()
                    </div>
                </div>
            </div>

            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Email</div>
                    <div class="info-value">@candidature.Candidat.Email</div>
                </div>

                @if (!string.IsNullOrEmpty(candidature.Candidat.PhoneNumber))
                {
                    <div class="info-item">
                        <div class="info-label">Téléphone</div>
                        <div class="info-value">@candidature.Candidat.PhoneNumber</div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(candidature.Candidat.Diplome))
                {
                    <div class="info-item">
                        <div class="info-label">Formation</div>
                        <div class="info-value">@candidature.Candidat.Diplome</div>
                    </div>
                }

                @if (candidature.Candidat.NbAnsExp.HasValue)
                {
                    <div class="info-item">
                        <div class="info-label">Expérience</div>
                        <div class="info-value">@candidature.Candidat.NbAnsExp ans</div>
                    </div>
                }

                <div class="info-item">
                    <div class="info-label">Âge</div>
                    <div class="info-value">@candidature.Candidat.Age ans</div>
                </div>

                @if (!string.IsNullOrEmpty(candidature.Candidat.Entreprise))
                {
                    <div class="info-item">
                        <div class="info-label">Entreprise actuelle</div>
                        <div class="info-value">@candidature.Candidat.Entreprise</div>
                    </div>
                }
            </div>

            <div class="action-buttons">
                @if (!string.IsNullOrEmpty(candidature.Candidat.CV))
                {
                    <a href="@Url.Content($"~/CVs/{candidature.Candidat.CV}")" class="btn btn-primary" target="_blank">
                        <i class="fas fa-file-pdf"></i>
                        Voir le CV
                    </a>
                }
                <form asp-action="UpdateCandidatureStatus" method="post" class="d-flex gap-2">
                    <input type="hidden" name="candidatureId" value="@candidature.Id" />
                    <button type="submit" name="newStatus" value="Validee" class="btn btn-success">
                        <i class="fas fa-check"></i>
                        Valider
                    </button>
                    <button type="submit" name="newStatus" value="Refusee" class="btn btn-danger">
                        <i class="fas fa-times"></i>
                        Refuser
                    </button>
                </form>
            </div>
        </div>
    }
</div>